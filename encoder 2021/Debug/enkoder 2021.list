
enkoder 2021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004810  08004810  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004818  08004818  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004818  08004818  00014818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000001c  0800483c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800483c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001068c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000242f  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef0  00000000  00000000  00032b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  000339f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020572  00000000  00000000  000347c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b5e6  00000000  00000000  00054d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5695  00000000  00000000  00060318  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001259ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e10  00000000  00000000  00125a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047e8 	.word	0x080047e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080047e8 	.word	0x080047e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SPIGetPos>:
int16_t currentRawPos, lastRawPos;
int32_t indexSum;
int8_t rolloverIndex = 0;
volatile uint8_t sdata[3];

static uint16_t SPIGetPos() {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  static int errorCount = 0;

  uint16_t rawVal = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	80fb      	strh	r3, [r7, #6]
  uint8_t parity;
  //uint8_t cof, ocf, lin, magInc, magDec;


  HAL_GPIO_WritePin(CS_TEST_GPIO_Port, CS_TEST_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2110      	movs	r1, #16
 80004d6:	4812      	ldr	r0, [pc, #72]	; (8000520 <SPIGetPos+0x58>)
 80004d8:	f002 f82c 	bl	8002534 <HAL_GPIO_WritePin>

  rawVal = (((sdata[0] << 8)| sdata[1]) >> 4) & 0x7FFF;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <SPIGetPos+0x5c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <SPIGetPos+0x5c>)
 80004e6:	7852      	ldrb	r2, [r2, #1]
 80004e8:	b2d2      	uxtb	r2, r2
 80004ea:	4313      	orrs	r3, r2
 80004ec:	111b      	asrs	r3, r3, #4
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004f4:	80fb      	strh	r3, [r7, #6]
//  ocf = ((sdata[1] >> 2) & 0x01);
//  cof = ((sdata[1] >> 1) & 0x01);
//  lin = sdata[1] & 0x01;
//  magInc = ((sdata[2] >> 7) & 0x01);
//  magDec = ((sdata[2] >> 6) & 0x01);
  parity = ((sdata[2] >> 5) & 0x01);
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <SPIGetPos+0x5c>)
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	095b      	lsrs	r3, r3, #5
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	717b      	strb	r3, [r7, #5]

  if(parity != 0){
 8000506:	797b      	ldrb	r3, [r7, #5]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d004      	beq.n	8000516 <SPIGetPos+0x4e>
    errorCount++;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <SPIGetPos+0x60>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <SPIGetPos+0x60>)
 8000514:	6013      	str	r3, [r2, #0]
  }

  return rawVal;
 8000516:	88fb      	ldrh	r3, [r7, #6]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40020000 	.word	0x40020000
 8000524:	20000054 	.word	0x20000054
 8000528:	2000003c 	.word	0x2000003c

0800052c <InitSPIRec>:


void InitSPIRec(){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(CS_TEST_GPIO_Port, CS_TEST_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2110      	movs	r1, #16
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <InitSPIRec+0x28>)
 8000536:	f001 fffd 	bl	8002534 <HAL_GPIO_WritePin>

	  if(HAL_SPI_Receive_IT(&hspi1, (uint8_t *)&sdata[0], 3 ) != HAL_OK) {
 800053a:	2203      	movs	r2, #3
 800053c:	4906      	ldr	r1, [pc, #24]	; (8000558 <InitSPIRec+0x2c>)
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <InitSPIRec+0x30>)
 8000540:	f002 fca4 	bl	8002e8c <HAL_SPI_Receive_IT>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <InitSPIRec+0x22>
	    Error_Handler();
 800054a:	f000 fcfd 	bl	8000f48 <Error_Handler>
	  }

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40020000 	.word	0x40020000
 8000558:	20000054 	.word	0x20000054
 800055c:	2000019c 	.word	0x2000019c

08000560 <rawPosToRawAngle>:
float rawPosToRawAngle(int32_t pos) {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  return ((float)(pos)/4096.0f) * 360.0f;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	ee07 3a90 	vmov	s15, r3
 800056e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000572:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000590 <rawPosToRawAngle+0x30>
 8000576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800057a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000594 <rawPosToRawAngle+0x34>
 800057e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000582:	eeb0 0a67 	vmov.f32	s0, s15
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	45800000 	.word	0x45800000
 8000594:	43b40000 	.word	0x43b40000

08000598 <rolloverOut>:

int16_t rolloverOut(uint16_t c1, uint16_t c2) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	80fb      	strh	r3, [r7, #6]
 80005a4:	4613      	mov	r3, r2
 80005a6:	80bb      	strh	r3, [r7, #4]
  return (ENC_MAX - c2) + c1 + 1;
 80005a8:	88fa      	ldrh	r2, [r7, #6]
 80005aa:	88bb      	ldrh	r3, [r7, #4]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005b4:	3301      	adds	r3, #1
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b21b      	sxth	r3, r3
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <halfRange>:

int16_t halfRange() {
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  return ((ENC_MAX - ENC_MIN) / 2) + 1;
 80005ca:	f640 0301 	movw	r3, #2049	; 0x801
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <getChange>:

int16_t getChange(int32_t valIn, int32_t lastValue) {
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  if (valIn == lastValue || valIn < ENC_MIN || valIn > ENC_MAX) {
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d006      	beq.n	80005f8 <getChange+0x20>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db03      	blt.n	80005f8 <getChange+0x20>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005f6:	dd01      	ble.n	80005fc <getChange+0x24>
    return 0;  // No change, or out of range
 80005f8:	2300      	movs	r3, #0
 80005fa:	e049      	b.n	8000690 <getChange+0xb8>
  }

  int16_t outValue = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	81fb      	strh	r3, [r7, #14]
  if (abs(valIn - lastValue) >= halfRange()){  // Assume rollover
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800060a:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800060e:	f7ff ffda 	bl	80005c6 <halfRange>
 8000612:	4603      	mov	r3, r0
 8000614:	429c      	cmp	r4, r3
 8000616:	db32      	blt.n	800067e <getChange+0xa6>

    if (valIn < lastValue) {     // Rollover, going up
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	da13      	bge.n	8000648 <getChange+0x70>
      outValue = rolloverOut(valIn, lastValue);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	b29b      	uxth	r3, r3
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	b292      	uxth	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffb4 	bl	8000598 <rolloverOut>
 8000630:	4603      	mov	r3, r0
 8000632:	81fb      	strh	r3, [r7, #14]
      rolloverIndex++;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <getChange+0xc0>)
 8000636:	f993 3000 	ldrsb.w	r3, [r3]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	3301      	adds	r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	b25a      	sxtb	r2, r3
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <getChange+0xc0>)
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	e021      	b.n	800068c <getChange+0xb4>
    }
    else if (valIn > lastValue) {     // Rollover, going down
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	dd1d      	ble.n	800068c <getChange+0xb4>
      outValue = -rolloverOut(lastValue, valIn);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b29b      	uxth	r3, r3
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	b292      	uxth	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff9c 	bl	8000598 <rolloverOut>
 8000660:	4603      	mov	r3, r0
 8000662:	b29b      	uxth	r3, r3
 8000664:	425b      	negs	r3, r3
 8000666:	b29b      	uxth	r3, r3
 8000668:	81fb      	strh	r3, [r7, #14]
      rolloverIndex--;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <getChange+0xc0>)
 800066c:	f993 3000 	ldrsb.w	r3, [r3]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	3b01      	subs	r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	b25a      	sxtb	r2, r3
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <getChange+0xc0>)
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e006      	b.n	800068c <getChange+0xb4>
    }
  }
  else {  // Normal change
    outValue = valIn - lastValue;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	b29a      	uxth	r2, r3
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b29b      	uxth	r3, r3
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	b29b      	uxth	r3, r3
 800068a:	81fb      	strh	r3, [r7, #14]
  }

  return outValue;
 800068c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	20000038 	.word	0x20000038

0800069c <getAngle>:

float getAngle(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  if(isFirstMeasurement == 1){
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <getAngle+0x78>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d10d      	bne.n	80006c4 <getAngle+0x28>
    isFirstMeasurement = 0;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <getAngle+0x78>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
    indexSum = SPIGetPos();
 80006ae:	f7ff ff0b 	bl	80004c8 <SPIGetPos>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <getAngle+0x7c>)
 80006b8:	601a      	str	r2, [r3, #0]
    lastRawPos = indexSum;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <getAngle+0x7c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	b21a      	sxth	r2, r3
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <getAngle+0x80>)
 80006c2:	801a      	strh	r2, [r3, #0]
  }

  currentRawPos = SPIGetPos();
 80006c4:	f7ff ff00 	bl	80004c8 <SPIGetPos>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <getAngle+0x84>)
 80006ce:	801a      	strh	r2, [r3, #0]
  indexSum += getChange(currentRawPos, lastRawPos);
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <getAngle+0x84>)
 80006d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <getAngle+0x80>)
 80006da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006de:	4619      	mov	r1, r3
 80006e0:	4610      	mov	r0, r2
 80006e2:	f7ff ff79 	bl	80005d8 <getChange>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <getAngle+0x7c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <getAngle+0x7c>)
 80006f2:	6013      	str	r3, [r2, #0]
  lastRawPos = currentRawPos;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <getAngle+0x84>)
 80006f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <getAngle+0x80>)
 80006fc:	801a      	strh	r2, [r3, #0]

  return rawPosToRawAngle(indexSum);
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <getAngle+0x7c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff2c 	bl	8000560 <rawPosToRawAngle>
 8000708:	eef0 7a40 	vmov.f32	s15, s0
}
 800070c:	eeb0 0a67 	vmov.f32	s0, s15
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000000 	.word	0x20000000
 8000718:	20000058 	.word	0x20000058
 800071c:	20000052 	.word	0x20000052
 8000720:	20000050 	.word	0x20000050

08000724 <IIR>:
#include "IIRFilter.h"

float IIR(float value, float coeff) {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	ed87 0a01 	vstr	s0, [r7, #4]
 800072e:	edc7 0a00 	vstr	s1, [r7]
  static float aggregate = 0.0f;
    
  float secCoeff = 1.0f - coeff;
 8000732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000736:	edd7 7a00 	vldr	s15, [r7]
 800073a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800073e:	edc7 7a03 	vstr	s15, [r7, #12]
  value = coeff * aggregate + secCoeff * value;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <IIR+0x84>)
 8000744:	ed93 7a00 	vldr	s14, [r3]
 8000748:	edd7 7a00 	vldr	s15, [r7]
 800074c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000750:	edd7 6a03 	vldr	s13, [r7, #12]
 8000754:	edd7 7a01 	vldr	s15, [r7, #4]
 8000758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800075c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000760:	edc7 7a01 	vstr	s15, [r7, #4]
  
  // last value
  aggregate = value;
 8000764:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <IIR+0x84>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6013      	str	r3, [r2, #0]
  
  //infinite response problem solution
  if (value < 0.5f && value > -0.5f) value = 0.0f; 
 800076a:	edd7 7a01 	vldr	s15, [r7, #4]
 800076e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d50b      	bpl.n	8000794 <IIR+0x70>
 800077c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000780:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8000784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078c:	dd02      	ble.n	8000794 <IIR+0x70>
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  
  return value;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	ee07 3a90 	vmov	s15, r3
 800079a:	eeb0 0a67 	vmov.f32	s0, s15
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	20000040 	.word	0x20000040

080007ac <MotorInit>:
static void MX_ADC1_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
static void MotorInit(){
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	mot1.polarization = Reverse;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MotorInit+0x28>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
	mot1.Motor_Min = 10;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MotorInit+0x28>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	731a      	strb	r2, [r3, #12]
	mot1.PWM_Min= 0;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <MotorInit+0x28>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
	mot1.PWM_Max= 1000;
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <MotorInit+0x28>)
 80007c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c8:	609a      	str	r2, [r3, #8]

}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	2000009c 	.word	0x2000009c

080007d8 <checkIfMovementAllowed>:





bool checkIfMovementAllowed(float setpoint, float feedback, float minAllowedAngle, float maxAllowedAngle) {
 80007d8:	b480      	push	{r7}
 80007da:	b087      	sub	sp, #28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	ed87 0a03 	vstr	s0, [r7, #12]
 80007e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80007e6:	ed87 1a01 	vstr	s2, [r7, #4]
 80007ea:	edc7 1a00 	vstr	s3, [r7]
  bool isNextSetpointInAllowedRange = setpoint < maxAllowedAngle && setpoint > minAllowedAngle;
 80007ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80007f2:	edd7 7a00 	vldr	s15, [r7]
 80007f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fe:	d50a      	bpl.n	8000816 <checkIfMovementAllowed+0x3e>
 8000800:	ed97 7a03 	vldr	s14, [r7, #12]
 8000804:	edd7 7a01 	vldr	s15, [r7, #4]
 8000808:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800080c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000810:	dd01      	ble.n	8000816 <checkIfMovementAllowed+0x3e>
 8000812:	2301      	movs	r3, #1
 8000814:	e000      	b.n	8000818 <checkIfMovementAllowed+0x40>
 8000816:	2300      	movs	r3, #0
 8000818:	75fb      	strb	r3, [r7, #23]
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	75fb      	strb	r3, [r7, #23]
  return isNextSetpointInAllowedRange;
 8000822:	7dfb      	ldrb	r3, [r7, #23]
}
 8000824:	4618      	mov	r0, r3
 8000826:	371c      	adds	r7, #28
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	  // Each 2ms (CPU_CLK=168, PSC=999, ARR=335)
	  if(htim->Instance == TIM10){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d108      	bne.n	8000854 <HAL_TIM_PeriodElapsedCallback+0x24>
		  InitSPIRec();
 8000842:	f7ff fe73 	bl	800052c <InitSPIRec>



	    counter2ms++;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	b29b      	uxth	r3, r3
 800084c:	3301      	adds	r3, #1
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000852:	801a      	strh	r2, [r3, #0]
	  }



}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40014400 	.word	0x40014400
 8000860:	2000004c 	.word	0x2000004c

08000864 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

	feedback = getAngle();
 800086c:	f7ff ff16 	bl	800069c <getAngle>
 8000870:	eef0 7a40 	vmov.f32	s15, s0
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <HAL_SPI_RxCpltCallback+0xac>)
 8000876:	edc3 7a00 	vstr	s15, [r3]
    filteredFeedback = IIR(feedback, 0.5f); // low pass filter
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <HAL_SPI_RxCpltCallback+0xac>)
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000884:	eeb0 0a67 	vmov.f32	s0, s15
 8000888:	f7ff ff4c 	bl	8000724 <IIR>
 800088c:	eef0 7a40 	vmov.f32	s15, s0
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <HAL_SPI_RxCpltCallback+0xb0>)
 8000892:	edc3 7a00 	vstr	s15, [r3]

    if(checkIfMovementAllowed(setpoint, filteredFeedback, minAllowedAngle, maxAllowedAngle)){
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <HAL_SPI_RxCpltCallback+0xb4>)
 8000898:	edd3 7a00 	vldr	s15, [r3]
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <HAL_SPI_RxCpltCallback+0xb0>)
 800089e:	ed93 7a00 	vldr	s14, [r3]
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <HAL_SPI_RxCpltCallback+0xb8>)
 80008a4:	edd3 6a00 	vldr	s13, [r3]
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <HAL_SPI_RxCpltCallback+0xbc>)
 80008aa:	ed93 6a00 	vldr	s12, [r3]
 80008ae:	eef0 1a46 	vmov.f32	s3, s12
 80008b2:	eeb0 1a66 	vmov.f32	s2, s13
 80008b6:	eef0 0a47 	vmov.f32	s1, s14
 80008ba:	eeb0 0a67 	vmov.f32	s0, s15
 80008be:	f7ff ff8b 	bl	80007d8 <checkIfMovementAllowed>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d01a      	beq.n	80008fe <HAL_SPI_RxCpltCallback+0x9a>

      PID(&pidProperties, setpoint, filteredFeedback, &pidResult, noDerivative, false);
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <HAL_SPI_RxCpltCallback+0xb4>)
 80008ca:	edd3 7a00 	vldr	s15, [r3]
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_SPI_RxCpltCallback+0xb0>)
 80008d0:	ed93 7a00 	vldr	s14, [r3]
 80008d4:	2300      	movs	r3, #0
 80008d6:	2200      	movs	r2, #0
 80008d8:	4912      	ldr	r1, [pc, #72]	; (8000924 <HAL_SPI_RxCpltCallback+0xc0>)
 80008da:	eef0 0a47 	vmov.f32	s1, s14
 80008de:	eeb0 0a67 	vmov.f32	s0, s15
 80008e2:	4811      	ldr	r0, [pc, #68]	; (8000928 <HAL_SPI_RxCpltCallback+0xc4>)
 80008e4:	f000 fc32 	bl	800114c <PID>
      set_speed((int32_t)pidResult, &mot1);
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_SPI_RxCpltCallback+0xc0>)
 80008ea:	edd3 7a00 	vldr	s15, [r3]
 80008ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <HAL_SPI_RxCpltCallback+0xc8>)
 80008f4:	ee17 0a90 	vmov	r0, s15
 80008f8:	f000 fb6e 	bl	8000fd8 <set_speed>
    }else{
    	set_speed(0,&mot1);
    }

}
 80008fc:	e003      	b.n	8000906 <HAL_SPI_RxCpltCallback+0xa2>
    	set_speed(0,&mot1);
 80008fe:	490b      	ldr	r1, [pc, #44]	; (800092c <HAL_SPI_RxCpltCallback+0xc8>)
 8000900:	2000      	movs	r0, #0
 8000902:	f000 fb69 	bl	8000fd8 <set_speed>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000044 	.word	0x20000044
 8000914:	20000048 	.word	0x20000048
 8000918:	20000004 	.word	0x20000004
 800091c:	20000008 	.word	0x20000008
 8000920:	2000000c 	.word	0x2000000c
 8000924:	200001f4 	.word	0x200001f4
 8000928:	200001f8 	.word	0x200001f8
 800092c:	2000009c 	.word	0x2000009c

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 ff60 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f846 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 fa80 	bl	8000e40 <MX_GPIO_Init>
  MX_CAN2_Init();
 8000940:	f000 f8fe 	bl	8000b40 <MX_CAN2_Init>
  MX_TIM3_Init();
 8000944:	f000 fa0a 	bl	8000d5c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000948:	f000 f8a8 	bl	8000a9c <MX_ADC1_Init>
  MX_SPI1_Init();
 800094c:	f000 f92e 	bl	8000bac <MX_SPI1_Init>
  MX_TIM1_Init();
 8000950:	f000 f964 	bl	8000c1c <MX_TIM1_Init>
  MX_TIM10_Init();
 8000954:	f000 fa50 	bl	8000df8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  MotorInit();
 8000958:	f7ff ff28 	bl	80007ac <MotorInit>
  start_pwm();
 800095c:	f000 faf8 	bl	8000f50 <start_pwm>
  set_speed(0,&mot1);
 8000960:	4915      	ldr	r1, [pc, #84]	; (80009b8 <main+0x88>)
 8000962:	2000      	movs	r0, #0
 8000964:	f000 fb38 	bl	8000fd8 <set_speed>
  init_pid();
 8000968:	f000 fbb0 	bl	80010cc <init_pid>
  HAL_TIM_Base_Start_IT(&htim10);
 800096c:	4813      	ldr	r0, [pc, #76]	; (80009bc <main+0x8c>)
 800096e:	f002 ffd7 	bl	8003920 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if(counter2ms == 100) {
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <main+0x90>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	b29b      	uxth	r3, r3
 8000978:	2b64      	cmp	r3, #100	; 0x64
 800097a:	d10a      	bne.n	8000992 <main+0x62>
	      LED_YELLOW_ON;
 800097c:	2201      	movs	r2, #1
 800097e:	2102      	movs	r1, #2
 8000980:	4810      	ldr	r0, [pc, #64]	; (80009c4 <main+0x94>)
 8000982:	f001 fdd7 	bl	8002534 <HAL_GPIO_WritePin>
	      LED_BLUE_ON;
 8000986:	2201      	movs	r2, #1
 8000988:	2104      	movs	r1, #4
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <main+0x94>)
 800098c:	f001 fdd2 	bl	8002534 <HAL_GPIO_WritePin>
 8000990:	e7ef      	b.n	8000972 <main+0x42>
	    }else if (counter2ms == 200){
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <main+0x90>)
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	b29b      	uxth	r3, r3
 8000998:	2bc8      	cmp	r3, #200	; 0xc8
 800099a:	d1ea      	bne.n	8000972 <main+0x42>
	      LED_YELLOW_OFF;
 800099c:	2200      	movs	r2, #0
 800099e:	2102      	movs	r1, #2
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <main+0x94>)
 80009a2:	f001 fdc7 	bl	8002534 <HAL_GPIO_WritePin>
	      LED_BLUE_OFF;
 80009a6:	2200      	movs	r2, #0
 80009a8:	2104      	movs	r1, #4
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <main+0x94>)
 80009ac:	f001 fdc2 	bl	8002534 <HAL_GPIO_WritePin>
	      counter2ms = 0;
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <main+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	801a      	strh	r2, [r3, #0]
	    if(counter2ms == 100) {
 80009b6:	e7dc      	b.n	8000972 <main+0x42>
 80009b8:	2000009c 	.word	0x2000009c
 80009bc:	2000005c 	.word	0x2000005c
 80009c0:	2000004c 	.word	0x2000004c
 80009c4:	40020400 	.word	0x40020400

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	; 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	2230      	movs	r2, #48	; 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fefe 	bl	80047d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <SystemClock_Config+0xcc>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <SystemClock_Config+0xcc>)
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <SystemClock_Config+0xcc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <SystemClock_Config+0xd0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <SystemClock_Config+0xd0>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <SystemClock_Config+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a3c:	23a8      	movs	r3, #168	; 0xa8
 8000a3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a48:	f107 0320 	add.w	r3, r7, #32
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fd8b 	bl	8002568 <HAL_RCC_OscConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a58:	f000 fa76 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a60:	2302      	movs	r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2105      	movs	r1, #5
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 ffe4 	bl	8002a48 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a86:	f000 fa5f 	bl	8000f48 <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	; 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <MX_ADC1_Init+0x9c>)
 8000ab2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ab6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <MX_ADC1_Init+0xa0>)
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000afe:	f000 feed 	bl	80018dc <HAL_ADC_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b08:	f000 fa1e 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000b1e:	f000 ff21 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b28:	f000 fa0e 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000ec 	.word	0x200000ec
 8000b38:	40012000 	.word	0x40012000
 8000b3c:	0f000001 	.word	0x0f000001

08000b40 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b46:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <MX_CAN2_Init+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b5e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000b62:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b6a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_CAN2_Init+0x64>)
 8000b92:	f001 f905 	bl	8001da0 <HAL_CAN_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000b9c:	f000 f9d4 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000134 	.word	0x20000134
 8000ba8:	40006800 	.word	0x40006800

08000bac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bb2:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <MX_SPI1_Init+0x6c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000be2:	2238      	movs	r2, #56	; 0x38
 8000be4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000bfa:	220a      	movs	r2, #10
 8000bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_SPI1_Init+0x68>)
 8000c00:	f002 f8e0 	bl	8002dc4 <HAL_SPI_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000c0a:	f000 f99d 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000019c 	.word	0x2000019c
 8000c18:	40013000 	.word	0x40013000

08000c1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b096      	sub	sp, #88	; 0x58
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2220      	movs	r2, #32
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 fdbf 	bl	80047d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c5a:	4b3e      	ldr	r3, [pc, #248]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000c5c:	4a3e      	ldr	r2, [pc, #248]	; (8000d58 <MX_TIM1_Init+0x13c>)
 8000c5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000c60:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000c62:	2210      	movs	r2, #16
 8000c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000c6c:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c80:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c86:	4833      	ldr	r0, [pc, #204]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000c88:	f002 fe1f 	bl	80038ca <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c92:	f000 f959 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	482c      	ldr	r0, [pc, #176]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000ca4:	f003 f8a2 	bl	8003dec <HAL_TIM_ConfigClockSource>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cae:	f000 f94b 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cb2:	4828      	ldr	r0, [pc, #160]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000cb4:	f002 fe58 	bl	8003968 <HAL_TIM_PWM_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cbe:	f000 f943 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4820      	ldr	r0, [pc, #128]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000cd2:	f003 fc7b 	bl	80045cc <HAL_TIMEx_MasterConfigSynchronization>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cdc:	f000 f934 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce0:	2360      	movs	r3, #96	; 0x60
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4813      	ldr	r0, [pc, #76]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000d06:	f002 ffab 	bl	8003c60 <HAL_TIM_PWM_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d10:	f000 f91a 	bl	8000f48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4807      	ldr	r0, [pc, #28]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000d38:	f003 fcc4 	bl	80046c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d42:	f000 f901 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d46:	4803      	ldr	r0, [pc, #12]	; (8000d54 <MX_TIM1_Init+0x138>)
 8000d48:	f000 fc90 	bl	800166c <HAL_TIM_MspPostInit>

}
 8000d4c:	bf00      	nop
 8000d4e:	3758      	adds	r7, #88	; 0x58
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2000015c 	.word	0x2000015c
 8000d58:	40010000 	.word	0x40010000

08000d5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	463b      	mov	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_TIM3_Init+0x94>)
 8000d7a:	4a1e      	ldr	r2, [pc, #120]	; (8000df4 <MX_TIM3_Init+0x98>)
 8000d7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <MX_TIM3_Init+0x94>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_TIM3_Init+0x94>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_TIM3_Init+0x94>)
 8000d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_TIM3_Init+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM3_Init+0x94>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d9e:	4814      	ldr	r0, [pc, #80]	; (8000df0 <MX_TIM3_Init+0x94>)
 8000da0:	f002 fd93 	bl	80038ca <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000daa:	f000 f8cd 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4619      	mov	r1, r3
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_TIM3_Init+0x94>)
 8000dbc:	f003 f816 	bl	8003dec <HAL_TIM_ConfigClockSource>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000dc6:	f000 f8bf 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <MX_TIM3_Init+0x94>)
 8000dd8:	f003 fbf8 	bl	80045cc <HAL_TIMEx_MasterConfigSynchronization>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000de2:	f000 f8b1 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000ac 	.word	0x200000ac
 8000df4:	40000400 	.word	0x40000400

08000df8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_TIM10_Init+0x40>)
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <MX_TIM10_Init+0x44>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MX_TIM10_Init+0x40>)
 8000e04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e08:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_TIM10_Init+0x40>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 335;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_TIM10_Init+0x40>)
 8000e12:	f240 124f 	movw	r2, #335	; 0x14f
 8000e16:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_TIM10_Init+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_TIM10_Init+0x40>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_TIM10_Init+0x40>)
 8000e26:	f002 fd50 	bl	80038ca <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000e30:	f000 f88a 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000005c 	.word	0x2000005c
 8000e3c:	40014400 	.word	0x40014400

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a36      	ldr	r2, [pc, #216]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a28      	ldr	r2, [pc, #160]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_GPIO_Init+0xf8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_TEST_Pin|HB_INB_Pin|HB_INA_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000ecc:	481b      	ldr	r0, [pc, #108]	; (8000f3c <MX_GPIO_Init+0xfc>)
 8000ece:	f001 fb31 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2106      	movs	r1, #6
 8000ed6:	481a      	ldr	r0, [pc, #104]	; (8000f40 <MX_GPIO_Init+0x100>)
 8000ed8:	f001 fb2c 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_TEST_Pin HB_INB_Pin HB_INA_Pin */
  GPIO_InitStruct.Pin = CS_TEST_Pin|HB_INB_Pin|HB_INA_Pin;
 8000edc:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <MX_GPIO_Init+0xfc>)
 8000ef6:	f001 f983 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_YELLOW_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin|LED_BLUE_Pin;
 8000efa:	2306      	movs	r3, #6
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <MX_GPIO_Init+0x100>)
 8000f12:	f001 f975 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : HB_DIAGB_Pin HB_DIAGA_Pin */
  GPIO_InitStruct.Pin = HB_DIAGB_Pin|HB_DIAGA_Pin;
 8000f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_GPIO_Init+0x104>)
 8000f2c:	f001 f968 	bl	8002200 <HAL_GPIO_Init>

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <Error_Handler+0x6>

08000f50 <start_pwm>:
#include "motor.h"

extern TIM_HandleTypeDef htim1;

void start_pwm() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HB_INA_GPIO_Port, HB_INA_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <start_pwm+0x28>)
 8000f5c:	f001 faea 	bl	8002534 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HB_INB_GPIO_Port, HB_INB_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f66:	4804      	ldr	r0, [pc, #16]	; (8000f78 <start_pwm+0x28>)
 8000f68:	f001 fae4 	bl	8002534 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <start_pwm+0x2c>)
 8000f70:	f002 fd30 	bl	80039d4 <HAL_TIM_PWM_Start>
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	2000015c 	.word	0x2000015c

08000f80 <map>:
  HAL_GPIO_WritePin(HB_INA_GPIO_Port, HB_INA_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(HB_INB_GPIO_Port, HB_INB_Pin, GPIO_PIN_RESET);
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
}

static int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {
 8000f80:	b490      	push	{r4, r7}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4623      	mov	r3, r4
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	4603      	mov	r3, r0
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	807b      	strh	r3, [r7, #2]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000f9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fa2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8000fac:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000fb0:	1a8a      	subs	r2, r1, r2
 8000fb2:	fb02 f203 	mul.w	r2, r2, r3
 8000fb6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000fba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fbe:	1acb      	subs	r3, r1, r3
 8000fc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	883b      	ldrh	r3, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b21b      	sxth	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc90      	pop	{r4, r7}
 8000fd6:	4770      	bx	lr

08000fd8 <set_speed>:

void set_speed(int32_t speed, MotorConfig *mconf ) {
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  if(speed > mconf->PWM_Max) speed = mconf->PWM_Max;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dd02      	ble.n	8000ff2 <set_speed+0x1a>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	607b      	str	r3, [r7, #4]
  if(speed < -mconf->PWM_Max) speed = -mconf->PWM_Max;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	425b      	negs	r3, r3
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	da03      	bge.n	8001006 <set_speed+0x2e>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	425b      	negs	r3, r3
 8001004:	607b      	str	r3, [r7, #4]
  
  if((speed > 0)&&(mconf->polarization==Reverse)||(speed < 0)&&(mconf->polarization==DubleReverse)){
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	dd03      	ble.n	8001014 <set_speed+0x3c>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <set_speed+0x4a>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	da28      	bge.n	800106c <set_speed+0x94>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d124      	bne.n	800106c <set_speed+0x94>
    HAL_GPIO_WritePin(HB_INA_GPIO_Port, HB_INA_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001028:	4826      	ldr	r0, [pc, #152]	; (80010c4 <set_speed+0xec>)
 800102a:	f001 fa83 	bl	8002534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(HB_INB_GPIO_Port, HB_INB_Pin, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001034:	4823      	ldr	r0, [pc, #140]	; (80010c4 <set_speed+0xec>)
 8001036:	f001 fa7d 	bl	8002534 <HAL_GPIO_WritePin>
    
    int16_t mappedSpeed = map(speed, mconf->PWM_Min, mconf->PWM_Max, mconf->Motor_Min, mconf->PWM_Max); // the motor doesnt rotate at low PWMs, so map o some higher range
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	b218      	sxth	r0, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	b219      	sxth	r1, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	b21a      	sxth	r2, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	7b1b      	ldrb	r3, [r3, #12]
 800104e:	b21c      	sxth	r4, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	b21b      	sxth	r3, r3
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	4623      	mov	r3, r4
 800105a:	f7ff ff91 	bl	8000f80 <map>
 800105e:	4603      	mov	r3, r0
 8001060:	81bb      	strh	r3, [r7, #12]
    TIM1->CCR1 = mappedSpeed;
 8001062:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <set_speed+0xf0>)
 8001064:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001068:	6353      	str	r3, [r2, #52]	; 0x34
  if((speed > 0)&&(mconf->polarization==Reverse)||(speed < 0)&&(mconf->polarization==DubleReverse)){
 800106a:	e026      	b.n	80010ba <set_speed+0xe2>
  }else {
    HAL_GPIO_WritePin(HB_INA_GPIO_Port, HB_INA_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <set_speed+0xec>)
 8001074:	f001 fa5e 	bl	8002534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(HB_INB_GPIO_Port, HB_INB_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <set_speed+0xec>)
 8001080:	f001 fa58 	bl	8002534 <HAL_GPIO_WritePin>
    
    int16_t mappedSpeed = map(-speed, mconf->PWM_Min, mconf->PWM_Max, mconf->Motor_Min, mconf->PWM_Max); // the motor doesnt rotate at low PWMs, so map o some higher range
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	b29b      	uxth	r3, r3
 8001088:	425b      	negs	r3, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	b218      	sxth	r0, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	b219      	sxth	r1, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	b21a      	sxth	r2, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	7b1b      	ldrb	r3, [r3, #12]
 800109e:	b21c      	sxth	r4, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	4623      	mov	r3, r4
 80010aa:	f7ff ff69 	bl	8000f80 <map>
 80010ae:	4603      	mov	r3, r0
 80010b0:	81fb      	strh	r3, [r7, #14]
    TIM1->CCR1 = mappedSpeed;
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <set_speed+0xf0>)
 80010b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b8:	6353      	str	r3, [r2, #52]	; 0x34
  } 
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd90      	pop	{r4, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40010000 	.word	0x40010000

080010cc <init_pid>:

#include "pid.h"

PID_Properties_t pidProperties;

void init_pid() { 
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  pidProperties.kp = 12.0;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <init_pid+0x68>)
 80010d2:	4a19      	ldr	r2, [pc, #100]	; (8001138 <init_pid+0x6c>)
 80010d4:	611a      	str	r2, [r3, #16]
  pidProperties.ki = 6.0f;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <init_pid+0x68>)
 80010d8:	4a18      	ldr	r2, [pc, #96]	; (800113c <init_pid+0x70>)
 80010da:	615a      	str	r2, [r3, #20]
  pidProperties.kd = 0.0f;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <init_pid+0x68>)
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  pidProperties.period = 5; // interval between PID computations [ms]
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <init_pid+0x68>)
 80010e6:	2205      	movs	r2, #5
 80010e8:	801a      	strh	r2, [r3, #0]
  pidProperties.deadband = 2.5f; // [deg]
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <init_pid+0x68>)
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <init_pid+0x74>)
 80010ee:	605a      	str	r2, [r3, #4]
  pidProperties.error = 0.0f;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <init_pid+0x68>)
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  pidProperties.integralSum = 0.0f;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <init_pid+0x68>)
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  pidProperties.posIntegralLimit = 1000.0f;       //integral anti-windup - same as motor max pwm
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <init_pid+0x68>)
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <init_pid+0x78>)
 8001104:	61da      	str	r2, [r3, #28]
  pidProperties.negIntegralLimit = -1000.0f;       //integral anti-windup
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <init_pid+0x68>)
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <init_pid+0x7c>)
 800110a:	621a      	str	r2, [r3, #32]
  pidProperties.lastError = 0.0f;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <init_pid+0x68>)
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
  pidProperties.lastFeedback = 0.0f;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <init_pid+0x68>)
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
  pidProperties.posOutputLimit = 1000.0f;         //bound the output
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <init_pid+0x68>)
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <init_pid+0x78>)
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  pidProperties.negOutputLimit = -1000.0f;
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <init_pid+0x68>)
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <init_pid+0x7c>)
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200001f8 	.word	0x200001f8
 8001138:	41400000 	.word	0x41400000
 800113c:	40c00000 	.word	0x40c00000
 8001140:	40200000 	.word	0x40200000
 8001144:	447a0000 	.word	0x447a0000
 8001148:	c47a0000 	.word	0xc47a0000

0800114c <PID>:

uint8_t PID(PID_Properties_t* props, float setpoint, float feedback, float* pOutput, derivative_t derivativeType, bool reverse){
 800114c:	b480      	push	{r7}
 800114e:	b091      	sub	sp, #68	; 0x44
 8001150:	af00      	add	r7, sp, #0
 8001152:	6178      	str	r0, [r7, #20]
 8001154:	ed87 0a04 	vstr	s0, [r7, #16]
 8001158:	edc7 0a03 	vstr	s1, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	460b      	mov	r3, r1
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	4613      	mov	r3, r2
 8001168:	71bb      	strb	r3, [r7, #6]
  
  if(props == 0 || pOutput == 0) return 1;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <PID+0x2a>
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <PID+0x2e>
 8001176:	2301      	movs	r3, #1
 8001178:	e0f8      	b.n	800136c <PID+0x220>
  
  // we are doing the calculations in the PU (-1 : 1)
  const float scale_factor = 360.0f;
 800117a:	4b7f      	ldr	r3, [pc, #508]	; (8001378 <PID+0x22c>)
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  
  float error = (setpoint/scale_factor) - (feedback/scale_factor);
 800117e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001182:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800118a:	ed97 6a03 	vldr	s12, [r7, #12]
 800118e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001192:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float derivativeOutput = 0.0f;
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float output;
  
  // if we are not in the deadband
  float degreeDelta = setpoint - feedback;
 80011a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80011a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float absoluteDelta = fabs(degreeDelta);
 80011b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011b8:	eef0 7ae7 	vabs.f32	s15, s15
 80011bc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  if (absoluteDelta > props->deadband) {
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	f340 808e 	ble.w	80012f2 <PID+0x1a6>
    //proportional part
    float proportionalOutput = props->kp * error;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011dc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    //integral part
    float ki = props->ki * ((float)props->period / 1000.0f); // we need to take period into consideration (divide by 1000 to get seconds)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011fa:	ed9f 6a60 	vldr	s12, [pc, #384]	; 800137c <PID+0x230>
 80011fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001206:	edc7 7a08 	vstr	s15, [r7, #32]
    props->integralSum += ki * error;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001210:	edd7 6a08 	vldr	s13, [r7, #32]
 8001214:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800121c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	edc3 7a03 	vstr	s15, [r3, #12]
    //anti wind-up
    if (props->integralSum > props->posIntegralLimit) props->integralSum = props->posIntegralLimit;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	ed93 7a03 	vldr	s14, [r3, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	dd04      	ble.n	8001246 <PID+0xfa>
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	69da      	ldr	r2, [r3, #28]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	e00e      	b.n	8001264 <PID+0x118>
    else if (props->integralSum < props->negIntegralLimit) props->integralSum = props->negIntegralLimit;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	ed93 7a03 	vldr	s14, [r3, #12]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	d503      	bpl.n	8001264 <PID+0x118>
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	60da      	str	r2, [r3, #12]
    
    //derivative part
    
    if(derivativeType != noDerivative){
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d034      	beq.n	80012d4 <PID+0x188>
      float kd = props->kd / ((float)props->period / 1000.0f); // we need to take period into consideration (divide by 1000 to get seconds)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800137c <PID+0x230>
 8001280:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	edc7 7a07 	vstr	s15, [r7, #28]
      
      switch(derivativeType){
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d012      	beq.n	80012b8 <PID+0x16c>
 8001292:	2b02      	cmp	r3, #2
 8001294:	d000      	beq.n	8001298 <PID+0x14c>
      case derivativeOnError:
        derivativeOutput = kd * (error - props->lastError);
        break;
        
      default:
        break;
 8001296:	e01e      	b.n	80012d6 <PID+0x18a>
        derivativeOutput = kd * (-1.0f) * (feedback - props->lastFeedback);
 8001298:	edd7 7a07 	vldr	s15, [r7, #28]
 800129c:	eeb1 7a67 	vneg.f32	s14, s15
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80012a6:	edd7 6a03 	vldr	s13, [r7, #12]
 80012aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        break;
 80012b6:	e00e      	b.n	80012d6 <PID+0x18a>
        derivativeOutput = kd * (error - props->lastError);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80012be:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80012c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80012ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        break;
 80012d2:	e000      	b.n	80012d6 <PID+0x18a>
      }
    }
 80012d4:	bf00      	nop
    output = (proportionalOutput + props->integralSum + derivativeOutput);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80012f0:	e006      	b.n	8001300 <PID+0x1b4>
  } else {
    props->integralSum = 0.0f;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
    output = 0;
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  }
  
  // reverse direction if needed
  if(reverse == true) output *= -1.0f;
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <PID+0x1c6>
 8001306:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800130a:	eef1 7a67 	vneg.f32	s15, s15
 800130e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  
  //check if output is within bounds
  if(output > props->posOutputLimit) output = props->posOutputLimit;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001318:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800131c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	dd03      	ble.n	800132e <PID+0x1e2>
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	63bb      	str	r3, [r7, #56]	; 0x38
 800132c:	e00c      	b.n	8001348 <PID+0x1fc>
  else if(output < props->negOutputLimit) output = props->negOutputLimit;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001334:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d502      	bpl.n	8001348 <PID+0x1fc>
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
  
  // map to full scale
  output *= scale_factor;
 8001348:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800134c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001354:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  
  *pOutput = output;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800135c:	601a      	str	r2, [r3, #0]
  
  props->lastFeedback = feedback;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
  props->lastError = error;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
  
  return 0;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3744      	adds	r7, #68	; 0x44
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	43b40000 	.word	0x43b40000
 800137c:	447a0000 	.word	0x447a0000

08001380 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_MspInit+0x4c>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_MspInit+0x4c>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_ADC_MspInit+0x7c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d127      	bne.n	8001442 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_ADC_MspInit+0x80>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a15      	ldr	r2, [pc, #84]	; (8001450 <HAL_ADC_MspInit+0x80>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800142a:	2302      	movs	r3, #2
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_ADC_MspInit+0x84>)
 800143e:	f000 fedf 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020800 	.word	0x40020800

08001458 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <HAL_CAN_MspInit+0xa0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d13a      	bne.n	80014f0 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <HAL_CAN_MspInit+0xa4>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <HAL_CAN_MspInit+0xa4>)
 8001484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_CAN_MspInit+0xa4>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_CAN_MspInit+0xa4>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_CAN_MspInit+0xa4>)
 80014a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_CAN_MspInit+0xa4>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_CAN_MspInit+0xa4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_CAN_MspInit+0xa4>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_CAN_MspInit+0xa4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80014e0:	2309      	movs	r3, #9
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_CAN_MspInit+0xa8>)
 80014ec:	f000 fe88 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40006800 	.word	0x40006800
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400

08001504 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <HAL_SPI_MspInit+0x94>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d133      	bne.n	800158e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_SPI_MspInit+0x98>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a1b      	ldr	r2, [pc, #108]	; (800159c <HAL_SPI_MspInit+0x98>)
 8001530:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_SPI_MspInit+0x98>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_SPI_MspInit+0x98>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a14      	ldr	r2, [pc, #80]	; (800159c <HAL_SPI_MspInit+0x98>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_SPI_MspInit+0x98>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800155e:	2360      	movs	r3, #96	; 0x60
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800156e:	2305      	movs	r3, #5
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <HAL_SPI_MspInit+0x9c>)
 800157a:	f000 fe41 	bl	8002200 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2023      	movs	r0, #35	; 0x23
 8001584:	f000 fde3 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001588:	2023      	movs	r0, #35	; 0x23
 800158a:	f000 fdfc 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40013000 	.word	0x40013000
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000

080015a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a2a      	ldr	r2, [pc, #168]	; (800165c <HAL_TIM_Base_MspInit+0xb8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d116      	bne.n	80015e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_TIM_Base_MspInit+0xbc>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a28      	ldr	r2, [pc, #160]	; (8001660 <HAL_TIM_Base_MspInit+0xbc>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_TIM_Base_MspInit+0xbc>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2019      	movs	r0, #25
 80015d8:	f000 fdb9 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015dc:	2019      	movs	r0, #25
 80015de:	f000 fdd2 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80015e2:	e036      	b.n	8001652 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_TIM_Base_MspInit+0xc0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d116      	bne.n	800161c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_TIM_Base_MspInit+0xbc>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <HAL_TIM_Base_MspInit+0xbc>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_TIM_Base_MspInit+0xbc>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	201d      	movs	r0, #29
 8001610:	f000 fd9d 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001614:	201d      	movs	r0, #29
 8001616:	f000 fdb6 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 800161a:	e01a      	b.n	8001652 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_TIM_Base_MspInit+0xc4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d115      	bne.n	8001652 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_TIM_Base_MspInit+0xbc>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <HAL_TIM_Base_MspInit+0xbc>)
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_TIM_Base_MspInit+0xbc>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2019      	movs	r0, #25
 8001648:	f000 fd81 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800164c:	2019      	movs	r0, #25
 800164e:	f000 fd9a 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40010000 	.word	0x40010000
 8001660:	40023800 	.word	0x40023800
 8001664:	40000400 	.word	0x40000400
 8001668:	40014400 	.word	0x40014400

0800166c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <HAL_TIM_MspPostInit+0x68>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d11e      	bne.n	80016cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_TIM_MspPostInit+0x6c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_TIM_MspPostInit+0x6c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_TIM_MspPostInit+0x6c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HB_PWM_Pin;
 80016aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016bc:	2301      	movs	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HB_PWM_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	4619      	mov	r1, r3
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_TIM_MspPostInit+0x70>)
 80016c8:	f000 fd9a 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40010000 	.word	0x40010000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <NMI_Handler+0x4>

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler+0x4>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <UsageFault_Handler+0x4>

080016fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 f8b6 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001738:	4803      	ldr	r0, [pc, #12]	; (8001748 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800173a:	f002 f989 	bl	8003a50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800173e:	4803      	ldr	r0, [pc, #12]	; (800174c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001740:	f002 f986 	bl	8003a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000015c 	.word	0x2000015c
 800174c:	2000005c 	.word	0x2000005c

08001750 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM3_IRQHandler+0x10>)
 8001756:	f002 f97b 	bl	8003a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000ac 	.word	0x200000ac

08001764 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <SPI1_IRQHandler+0x10>)
 800176a:	f001 fcb9 	bl	80030e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000019c 	.word	0x2000019c

08001778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <SystemInit+0x28>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <SystemInit+0x28>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SystemInit+0x28>)
 800178e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001792:	609a      	str	r2, [r3, #8]
#endif
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017aa:	e003      	b.n	80017b4 <LoopCopyDataInit>

080017ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017b2:	3104      	adds	r1, #4

080017b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017bc:	d3f6      	bcc.n	80017ac <CopyDataInit>
  ldr  r2, =_sbss
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017c0:	e002      	b.n	80017c8 <LoopFillZerobss>

080017c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017c4:	f842 3b04 	str.w	r3, [r2], #4

080017c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017cc:	d3f9      	bcc.n	80017c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ce:	f7ff ffd3 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f002 ffdd 	bl	8004790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7ff f8ab 	bl	8000930 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017e0:	08004820 	.word	0x08004820
  ldr  r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017e8:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80017ec:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 80017f0:	20000230 	.word	0x20000230

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 fc89 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fda8 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 fca1 	bl	80021a2 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 fc69 	bl	800214e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000010 	.word	0x20000010
 8001894:	20000018 	.word	0x20000018
 8001898:	20000014 	.word	0x20000014

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000018 	.word	0x20000018
 80018c0:	2000022c 	.word	0x2000022c

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000022c 	.word	0x2000022c

080018dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e033      	b.n	800195a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fd68 	bl	80013d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	d118      	bne.n	800194c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001922:	f023 0302 	bic.w	r3, r3, #2
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f93a 	bl	8001ba8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f023 0303 	bic.w	r3, r3, #3
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
 800194a:	e001      	b.n	8001950 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1c>
 800197c:	2302      	movs	r3, #2
 800197e:	e105      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x228>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b09      	cmp	r3, #9
 800198e:	d925      	bls.n	80019dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68d9      	ldr	r1, [r3, #12]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	3b1e      	subs	r3, #30
 80019a6:	2207      	movs	r2, #7
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43da      	mvns	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	400a      	ands	r2, r1
 80019b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68d9      	ldr	r1, [r3, #12]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	4603      	mov	r3, r0
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4403      	add	r3, r0
 80019ce:	3b1e      	subs	r3, #30
 80019d0:	409a      	lsls	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	e022      	b.n	8001a22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6919      	ldr	r1, [r3, #16]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	2207      	movs	r2, #7
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	400a      	ands	r2, r1
 80019fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6919      	ldr	r1, [r3, #16]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4618      	mov	r0, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4403      	add	r3, r0
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d824      	bhi.n	8001a74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3b05      	subs	r3, #5
 8001a3c:	221f      	movs	r2, #31
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	400a      	ands	r2, r1
 8001a4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	3b05      	subs	r3, #5
 8001a66:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	635a      	str	r2, [r3, #52]	; 0x34
 8001a72:	e04c      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d824      	bhi.n	8001ac6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3b23      	subs	r3, #35	; 0x23
 8001a8e:	221f      	movs	r2, #31
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43da      	mvns	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3b23      	subs	r3, #35	; 0x23
 8001ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac4:	e023      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3b41      	subs	r3, #65	; 0x41
 8001ad8:	221f      	movs	r2, #31
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	3b41      	subs	r3, #65	; 0x41
 8001b02:	fa00 f203 	lsl.w	r2, r0, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_ADC_ConfigChannel+0x234>)
 8001b10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <HAL_ADC_ConfigChannel+0x238>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d109      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1cc>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b12      	cmp	r3, #18
 8001b22:	d105      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_ADC_ConfigChannel+0x238>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d123      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x21e>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d003      	beq.n	8001b4a <HAL_ADC_ConfigChannel+0x1e6>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b11      	cmp	r3, #17
 8001b48:	d11b      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d111      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_ADC_ConfigChannel+0x23c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <HAL_ADC_ConfigChannel+0x240>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	0c9a      	lsrs	r2, r3, #18
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b74:	e002      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f9      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40012300 	.word	0x40012300
 8001b9c:	40012000 	.word	0x40012000
 8001ba0:	20000010 	.word	0x20000010
 8001ba4:	431bde83 	.word	0x431bde83

08001ba8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb0:	4b79      	ldr	r3, [pc, #484]	; (8001d98 <ADC_Init+0x1f0>)
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	021a      	lsls	r2, r3, #8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6899      	ldr	r1, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <ADC_Init+0x1f4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d022      	beq.n	8001c86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6899      	ldr	r1, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6899      	ldr	r1, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	e00f      	b.n	8001ca6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ca4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0202 	bic.w	r2, r2, #2
 8001cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7e1b      	ldrb	r3, [r3, #24]
 8001cc0:	005a      	lsls	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ce2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	035a      	lsls	r2, r3, #13
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	e007      	b.n	8001d1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	051a      	lsls	r2, r3, #20
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6899      	ldr	r1, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d5e:	025a      	lsls	r2, r3, #9
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6899      	ldr	r1, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	029a      	lsls	r2, r3, #10
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	609a      	str	r2, [r3, #8]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	0f000001 	.word	0x0f000001

08001da0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0ed      	b.n	8001f8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fb4a 	bl	8001458 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0202 	bic.w	r2, r2, #2
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd4:	f7ff fd76 	bl	80018c4 <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dda:	e012      	b.n	8001e02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ddc:	f7ff fd72 	bl	80018c4 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b0a      	cmp	r3, #10
 8001de8:	d90b      	bls.n	8001e02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2205      	movs	r2, #5
 8001dfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0c5      	b.n	8001f8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1e5      	bne.n	8001ddc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e20:	f7ff fd50 	bl	80018c4 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e26:	e012      	b.n	8001e4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e28:	f7ff fd4c 	bl	80018c4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b0a      	cmp	r3, #10
 8001e34:	d90b      	bls.n	8001e4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2205      	movs	r2, #5
 8001e46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e09f      	b.n	8001f8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0e5      	beq.n	8001e28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7e1b      	ldrb	r3, [r3, #24]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d108      	bne.n	8001e76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e007      	b.n	8001e86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7e5b      	ldrb	r3, [r3, #25]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d108      	bne.n	8001ea0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e007      	b.n	8001eb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7e9b      	ldrb	r3, [r3, #26]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d108      	bne.n	8001eca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0220 	orr.w	r2, r2, #32
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e007      	b.n	8001eda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0220 	bic.w	r2, r2, #32
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7edb      	ldrb	r3, [r3, #27]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d108      	bne.n	8001ef4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0210 	bic.w	r2, r2, #16
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e007      	b.n	8001f04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0210 	orr.w	r2, r2, #16
 8001f02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7f1b      	ldrb	r3, [r3, #28]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d108      	bne.n	8001f1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e007      	b.n	8001f2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0208 	bic.w	r2, r2, #8
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7f5b      	ldrb	r3, [r3, #29]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d108      	bne.n	8001f48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0204 	orr.w	r2, r2, #4
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e007      	b.n	8001f58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0204 	bic.w	r2, r2, #4
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	ea42 0103 	orr.w	r1, r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4907      	ldr	r1, [pc, #28]	; (8002034 <__NVIC_EnableIRQ+0x38>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f7ff ff8e 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff29 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff3e 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff8e 	bl	800208c <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5d 	bl	8002038 <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff31 	bl	8001ffc <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa2 	bl	80020f4 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d004      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2280      	movs	r2, #128	; 0x80
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e00c      	b.n	80021f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2205      	movs	r2, #5
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	e16b      	b.n	80024f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	429a      	cmp	r2, r3
 8002236:	f040 815a 	bne.w	80024ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d00b      	beq.n	800225a <HAL_GPIO_Init+0x5a>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d007      	beq.n	800225a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800224e:	2b11      	cmp	r3, #17
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b12      	cmp	r3, #18
 8002258:	d130      	bne.n	80022bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0201 	and.w	r2, r3, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0xfc>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b12      	cmp	r3, #18
 80022fa:	d123      	bne.n	8002344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	08da      	lsrs	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3208      	adds	r2, #8
 8002304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	220f      	movs	r2, #15
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	69b9      	ldr	r1, [r7, #24]
 8002340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0203 	and.w	r2, r3, #3
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80b4 	beq.w	80024ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <HAL_GPIO_Init+0x308>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	4a5e      	ldr	r2, [pc, #376]	; (8002508 <HAL_GPIO_Init+0x308>)
 8002390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002394:	6453      	str	r3, [r2, #68]	; 0x44
 8002396:	4b5c      	ldr	r3, [pc, #368]	; (8002508 <HAL_GPIO_Init+0x308>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a2:	4a5a      	ldr	r2, [pc, #360]	; (800250c <HAL_GPIO_Init+0x30c>)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	220f      	movs	r2, #15
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_GPIO_Init+0x310>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02b      	beq.n	8002426 <HAL_GPIO_Init+0x226>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a50      	ldr	r2, [pc, #320]	; (8002514 <HAL_GPIO_Init+0x314>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d025      	beq.n	8002422 <HAL_GPIO_Init+0x222>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x318>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01f      	beq.n	800241e <HAL_GPIO_Init+0x21e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_Init+0x31c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d019      	beq.n	800241a <HAL_GPIO_Init+0x21a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4d      	ldr	r2, [pc, #308]	; (8002520 <HAL_GPIO_Init+0x320>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0x216>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_GPIO_Init+0x324>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00d      	beq.n	8002412 <HAL_GPIO_Init+0x212>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4b      	ldr	r2, [pc, #300]	; (8002528 <HAL_GPIO_Init+0x328>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x20e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4a      	ldr	r2, [pc, #296]	; (800252c <HAL_GPIO_Init+0x32c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_GPIO_Init+0x20a>
 8002406:	2307      	movs	r3, #7
 8002408:	e00e      	b.n	8002428 <HAL_GPIO_Init+0x228>
 800240a:	2308      	movs	r3, #8
 800240c:	e00c      	b.n	8002428 <HAL_GPIO_Init+0x228>
 800240e:	2306      	movs	r3, #6
 8002410:	e00a      	b.n	8002428 <HAL_GPIO_Init+0x228>
 8002412:	2305      	movs	r3, #5
 8002414:	e008      	b.n	8002428 <HAL_GPIO_Init+0x228>
 8002416:	2304      	movs	r3, #4
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x228>
 800241a:	2303      	movs	r3, #3
 800241c:	e004      	b.n	8002428 <HAL_GPIO_Init+0x228>
 800241e:	2302      	movs	r3, #2
 8002420:	e002      	b.n	8002428 <HAL_GPIO_Init+0x228>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x228>
 8002426:	2300      	movs	r3, #0
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f002 0203 	and.w	r2, r2, #3
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	4093      	lsls	r3, r2
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002438:	4934      	ldr	r1, [pc, #208]	; (800250c <HAL_GPIO_Init+0x30c>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002446:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_GPIO_Init+0x330>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800246a:	4a31      	ldr	r2, [pc, #196]	; (8002530 <HAL_GPIO_Init+0x330>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_GPIO_Init+0x330>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002494:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_GPIO_Init+0x330>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_GPIO_Init+0x330>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024be:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <HAL_GPIO_Init+0x330>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_GPIO_Init+0x330>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e8:	4a11      	ldr	r2, [pc, #68]	; (8002530 <HAL_GPIO_Init+0x330>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	f67f ae90 	bls.w	800221c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	3724      	adds	r7, #36	; 0x24
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40023800 	.word	0x40023800
 800250c:	40013800 	.word	0x40013800
 8002510:	40020000 	.word	0x40020000
 8002514:	40020400 	.word	0x40020400
 8002518:	40020800 	.word	0x40020800
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40021000 	.word	0x40021000
 8002524:	40021400 	.word	0x40021400
 8002528:	40021800 	.word	0x40021800
 800252c:	40021c00 	.word	0x40021c00
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e25b      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d075      	beq.n	8002672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002586:	4ba3      	ldr	r3, [pc, #652]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b04      	cmp	r3, #4
 8002590:	d00c      	beq.n	80025ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4ba0      	ldr	r3, [pc, #640]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800259a:	2b08      	cmp	r3, #8
 800259c:	d112      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259e:	4b9d      	ldr	r3, [pc, #628]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025aa:	d10b      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	4b99      	ldr	r3, [pc, #612]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d05b      	beq.n	8002670 <HAL_RCC_OscConfig+0x108>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d157      	bne.n	8002670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e236      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025cc:	d106      	bne.n	80025dc <HAL_RCC_OscConfig+0x74>
 80025ce:	4b91      	ldr	r3, [pc, #580]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a90      	ldr	r2, [pc, #576]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x98>
 80025e6:	4b8b      	ldr	r3, [pc, #556]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a8a      	ldr	r2, [pc, #552]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b88      	ldr	r3, [pc, #544]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a87      	ldr	r2, [pc, #540]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xb0>
 8002600:	4b84      	ldr	r3, [pc, #528]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a83      	ldr	r2, [pc, #524]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b81      	ldr	r3, [pc, #516]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a80      	ldr	r2, [pc, #512]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff f950 	bl	80018c4 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7ff f94c 	bl	80018c4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1fb      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0xc0>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff f93c 	bl	80018c4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff f938 	bl	80018c4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1e7      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	4b6c      	ldr	r3, [pc, #432]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0xe8>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d063      	beq.n	8002746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b62      	ldr	r3, [pc, #392]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002692:	2b08      	cmp	r3, #8
 8002694:	d11c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002696:	4b5f      	ldr	r3, [pc, #380]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	4b5c      	ldr	r3, [pc, #368]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1bb      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b56      	ldr	r3, [pc, #344]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4952      	ldr	r1, [pc, #328]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	e03a      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b4f      	ldr	r3, [pc, #316]	; (8002818 <HAL_RCC_OscConfig+0x2b0>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7ff f8f1 	bl	80018c4 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e6:	f7ff f8ed 	bl	80018c4 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e19c      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	4b46      	ldr	r3, [pc, #280]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b43      	ldr	r3, [pc, #268]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4940      	ldr	r1, [pc, #256]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
 8002718:	e015      	b.n	8002746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_RCC_OscConfig+0x2b0>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7ff f8d0 	bl	80018c4 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002728:	f7ff f8cc 	bl	80018c4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e17b      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d030      	beq.n	80027b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCC_OscConfig+0x2b4>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7ff f8b0 	bl	80018c4 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002768:	f7ff f8ac 	bl	80018c4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e15b      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	4b26      	ldr	r3, [pc, #152]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x200>
 8002786:	e015      	b.n	80027b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_OscConfig+0x2b4>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7ff f899 	bl	80018c4 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002796:	f7ff f895 	bl	80018c4 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e144      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a0 	beq.w	8002902 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_OscConfig+0x2b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d121      	bne.n	8002842 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_RCC_OscConfig+0x2b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_RCC_OscConfig+0x2b8>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280a:	f7ff f85b 	bl	80018c4 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	e011      	b.n	8002836 <HAL_RCC_OscConfig+0x2ce>
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	42470000 	.word	0x42470000
 800281c:	42470e80 	.word	0x42470e80
 8002820:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002824:	f7ff f84e 	bl	80018c4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e0fd      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <HAL_RCC_OscConfig+0x4d4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d106      	bne.n	8002858 <HAL_RCC_OscConfig+0x2f0>
 800284a:	4b7d      	ldr	r3, [pc, #500]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a7c      	ldr	r2, [pc, #496]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
 8002856:	e01c      	b.n	8002892 <HAL_RCC_OscConfig+0x32a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b05      	cmp	r3, #5
 800285e:	d10c      	bne.n	800287a <HAL_RCC_OscConfig+0x312>
 8002860:	4b77      	ldr	r3, [pc, #476]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	4a76      	ldr	r2, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	6713      	str	r3, [r2, #112]	; 0x70
 800286c:	4b74      	ldr	r3, [pc, #464]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a73      	ldr	r2, [pc, #460]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	e00b      	b.n	8002892 <HAL_RCC_OscConfig+0x32a>
 800287a:	4b71      	ldr	r3, [pc, #452]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	4a70      	ldr	r2, [pc, #448]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6713      	str	r3, [r2, #112]	; 0x70
 8002886:	4b6e      	ldr	r3, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a6d      	ldr	r2, [pc, #436]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 800288c:	f023 0304 	bic.w	r3, r3, #4
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d015      	beq.n	80028c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7ff f813 	bl	80018c4 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7ff f80f 	bl	80018c4 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0bc      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	4b61      	ldr	r3, [pc, #388]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ee      	beq.n	80028a2 <HAL_RCC_OscConfig+0x33a>
 80028c4:	e014      	b.n	80028f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7fe fffd 	bl	80018c4 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ce:	f7fe fff9 	bl	80018c4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e0a6      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e4:	4b56      	ldr	r3, [pc, #344]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1ee      	bne.n	80028ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d105      	bne.n	8002902 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f6:	4b52      	ldr	r3, [pc, #328]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a51      	ldr	r2, [pc, #324]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 80028fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8092 	beq.w	8002a30 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800290c:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b08      	cmp	r3, #8
 8002916:	d05c      	beq.n	80029d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d141      	bne.n	80029a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002920:	4b48      	ldr	r3, [pc, #288]	; (8002a44 <HAL_RCC_OscConfig+0x4dc>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe ffcd 	bl	80018c4 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292e:	f7fe ffc9 	bl	80018c4 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e078      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002940:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f0      	bne.n	800292e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	019b      	lsls	r3, r3, #6
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	3b01      	subs	r3, #1
 8002966:	041b      	lsls	r3, r3, #16
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	061b      	lsls	r3, r3, #24
 8002970:	4933      	ldr	r1, [pc, #204]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002976:	4b33      	ldr	r3, [pc, #204]	; (8002a44 <HAL_RCC_OscConfig+0x4dc>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe ffa2 	bl	80018c4 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe ff9e 	bl	80018c4 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e04d      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002996:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x41c>
 80029a2:	e045      	b.n	8002a30 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <HAL_RCC_OscConfig+0x4dc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe ff8b 	bl	80018c4 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe ff87 	bl	80018c4 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e036      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x44a>
 80029d0:	e02e      	b.n	8002a30 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e029      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029de:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <HAL_RCC_OscConfig+0x4d8>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d11c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d115      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a06:	4013      	ands	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d10d      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	40023800 	.word	0x40023800
 8002a44:	42470060 	.word	0x42470060

08002a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0cc      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d90c      	bls.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0b8      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab4:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	494d      	ldr	r1, [pc, #308]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d044      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d119      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e07f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e06f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e067      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4934      	ldr	r1, [pc, #208]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fec4 	bl	80018c4 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe fec0 	bl	80018c4 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e04f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d20c      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e032      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4916      	ldr	r1, [pc, #88]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	490e      	ldr	r1, [pc, #56]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bce:	f000 f821 	bl	8002c14 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4601      	mov	r1, r0
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	fa21 f303 	lsr.w	r3, r1, r3
 8002be6:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fe24 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00
 8002c04:	40023800 	.word	0x40023800
 8002c08:	08004800 	.word	0x08004800
 8002c0c:	20000010 	.word	0x20000010
 8002c10:	20000014 	.word	0x20000014

08002c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c2a:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d007      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x32>
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d008      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x38>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80b4 	bne.w	8002da8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c42:	60bb      	str	r3, [r7, #8]
       break;
 8002c44:	e0b3      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c46:	4b5e      	ldr	r3, [pc, #376]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c48:	60bb      	str	r3, [r7, #8]
      break;
 8002c4a:	e0b0      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c4c:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c56:	4b58      	ldr	r3, [pc, #352]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d04a      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c62:	4b55      	ldr	r3, [pc, #340]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	f04f 0400 	mov.w	r4, #0
 8002c6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	ea03 0501 	and.w	r5, r3, r1
 8002c78:	ea04 0602 	and.w	r6, r4, r2
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	4632      	mov	r2, r6
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	f04f 0400 	mov.w	r4, #0
 8002c88:	0154      	lsls	r4, r2, #5
 8002c8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c8e:	014b      	lsls	r3, r1, #5
 8002c90:	4619      	mov	r1, r3
 8002c92:	4622      	mov	r2, r4
 8002c94:	1b49      	subs	r1, r1, r5
 8002c96:	eb62 0206 	sbc.w	r2, r2, r6
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	f04f 0400 	mov.w	r4, #0
 8002ca2:	0194      	lsls	r4, r2, #6
 8002ca4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ca8:	018b      	lsls	r3, r1, #6
 8002caa:	1a5b      	subs	r3, r3, r1
 8002cac:	eb64 0402 	sbc.w	r4, r4, r2
 8002cb0:	f04f 0100 	mov.w	r1, #0
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	00e2      	lsls	r2, r4, #3
 8002cba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cbe:	00d9      	lsls	r1, r3, #3
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4614      	mov	r4, r2
 8002cc4:	195b      	adds	r3, r3, r5
 8002cc6:	eb44 0406 	adc.w	r4, r4, r6
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	0262      	lsls	r2, r4, #9
 8002cd4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002cd8:	0259      	lsls	r1, r3, #9
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4614      	mov	r4, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f04f 0400 	mov.w	r4, #0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4623      	mov	r3, r4
 8002cec:	f7fd fa6c 	bl	80001c8 <__aeabi_uldivmod>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	e049      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	f04f 0400 	mov.w	r4, #0
 8002d02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	ea03 0501 	and.w	r5, r3, r1
 8002d0e:	ea04 0602 	and.w	r6, r4, r2
 8002d12:	4629      	mov	r1, r5
 8002d14:	4632      	mov	r2, r6
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	f04f 0400 	mov.w	r4, #0
 8002d1e:	0154      	lsls	r4, r2, #5
 8002d20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d24:	014b      	lsls	r3, r1, #5
 8002d26:	4619      	mov	r1, r3
 8002d28:	4622      	mov	r2, r4
 8002d2a:	1b49      	subs	r1, r1, r5
 8002d2c:	eb62 0206 	sbc.w	r2, r2, r6
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	f04f 0400 	mov.w	r4, #0
 8002d38:	0194      	lsls	r4, r2, #6
 8002d3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d3e:	018b      	lsls	r3, r1, #6
 8002d40:	1a5b      	subs	r3, r3, r1
 8002d42:	eb64 0402 	sbc.w	r4, r4, r2
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	00e2      	lsls	r2, r4, #3
 8002d50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d54:	00d9      	lsls	r1, r3, #3
 8002d56:	460b      	mov	r3, r1
 8002d58:	4614      	mov	r4, r2
 8002d5a:	195b      	adds	r3, r3, r5
 8002d5c:	eb44 0406 	adc.w	r4, r4, r6
 8002d60:	f04f 0100 	mov.w	r1, #0
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	02a2      	lsls	r2, r4, #10
 8002d6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d6e:	0299      	lsls	r1, r3, #10
 8002d70:	460b      	mov	r3, r1
 8002d72:	4614      	mov	r4, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	4621      	mov	r1, r4
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f04f 0400 	mov.w	r4, #0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4623      	mov	r3, r4
 8002d82:	f7fd fa21 	bl	80001c8 <__aeabi_uldivmod>
 8002d86:	4603      	mov	r3, r0
 8002d88:	460c      	mov	r4, r1
 8002d8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	3301      	adds	r3, #1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	60bb      	str	r3, [r7, #8]
      break;
 8002da6:	e002      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002daa:	60bb      	str	r3, [r7, #8]
      break;
 8002dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dae:	68bb      	ldr	r3, [r7, #8]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	007a1200 	.word	0x007a1200

08002dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e056      	b.n	8002e84 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d106      	bne.n	8002df6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fe fb87 	bl	8001504 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	ea42 0103 	orr.w	r1, r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	0c1b      	lsrs	r3, r3, #16
 8002e54:	f003 0104 	and.w	r1, r3, #4
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d110      	bne.n	8002ec8 <HAL_SPI_Receive_IT+0x3c>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eae:	d10b      	bne.n	8002ec8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f87a 	bl	8002fb8 <HAL_SPI_TransmitReceive_IT>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	e06e      	b.n	8002fa6 <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_SPI_Receive_IT+0x4a>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e067      	b.n	8002fa6 <HAL_SPI_Receive_IT+0x11a>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d002      	beq.n	8002ef0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eee:	e055      	b.n	8002f9c <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_SPI_Receive_IT+0x70>
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f00:	e04c      	b.n	8002f9c <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2204      	movs	r2, #4
 8002f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_SPI_Receive_IT+0x124>)
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
 8002f48:	e002      	b.n	8002f50 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_SPI_Receive_IT+0x128>)
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f58:	d107      	bne.n	8002f6a <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002f78:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	2b40      	cmp	r3, #64	; 0x40
 8002f86:	d008      	beq.n	8002f9a <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e000      	b.n	8002f9c <HAL_SPI_Receive_IT+0x110>
  }

error :
 8002f9a:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	080034fd 	.word	0x080034fd
 8002fb4:	080034b3 	.word	0x080034b3

08002fb8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_SPI_TransmitReceive_IT+0x20>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e075      	b.n	80030c4 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fe6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fee:	7dbb      	ldrb	r3, [r7, #22]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d00d      	beq.n	8003010 <HAL_SPI_TransmitReceive_IT+0x58>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffa:	d106      	bne.n	800300a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <HAL_SPI_TransmitReceive_IT+0x52>
 8003004:	7dbb      	ldrb	r3, [r7, #22]
 8003006:	2b04      	cmp	r3, #4
 8003008:	d002      	beq.n	8003010 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800300a:	2302      	movs	r3, #2
 800300c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800300e:	e054      	b.n	80030ba <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_TransmitReceive_IT+0x6a>
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003026:	e048      	b.n	80030ba <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b04      	cmp	r3, #4
 8003032:	d003      	beq.n	800303c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2205      	movs	r2, #5
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	887a      	ldrh	r2, [r7, #2]
 800304c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	887a      	ldrh	r2, [r7, #2]
 8003052:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	887a      	ldrh	r2, [r7, #2]
 800305e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	887a      	ldrh	r2, [r7, #2]
 8003064:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
 800307a:	e005      	b.n	8003088 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_SPI_TransmitReceive_IT+0x124>)
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003096:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b40      	cmp	r3, #64	; 0x40
 80030a4:	d008      	beq.n	80030b8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e000      	b.n	80030ba <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80030b8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	080033f5 	.word	0x080033f5
 80030d4:	08003455 	.word	0x08003455
 80030d8:	08003331 	.word	0x08003331
 80030dc:	08003395 	.word	0x08003395

080030e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10f      	bne.n	8003124 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
    return;
 8003122:	e0d8      	b.n	80032d6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_SPI_IRQHandler+0x66>
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	09db      	lsrs	r3, r3, #7
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
    return;
 8003144:	e0c7      	b.n	80032d6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10c      	bne.n	800316c <HAL_SPI_IRQHandler+0x8c>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80b5 	beq.w	80032d6 <HAL_SPI_IRQHandler+0x1f6>
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80ae 	beq.w	80032d6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d023      	beq.n	80031ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b03      	cmp	r3, #3
 8003190:	d011      	beq.n	80031b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f043 0204 	orr.w	r2, r3, #4
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	e00b      	b.n	80031ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	693b      	ldr	r3, [r7, #16]
        return;
 80031cc:	e083      	b.n	80032d6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d014      	beq.n	8003204 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	f043 0201 	orr.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00c      	beq.n	800322a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f043 0208 	orr.w	r2, r3, #8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	2b00      	cmp	r3, #0
 8003230:	d050      	beq.n	80032d4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003240:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_SPI_IRQHandler+0x17e>
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d034      	beq.n	80032c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0203 	bic.w	r2, r2, #3
 800326c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d011      	beq.n	800329a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	4a18      	ldr	r2, [pc, #96]	; (80032dc <HAL_SPI_IRQHandler+0x1fc>)
 800327c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe ff99 	bl	80021ba <HAL_DMA_Abort_IT>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a6:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <HAL_SPI_IRQHandler+0x1fc>)
 80032a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe ff83 	bl	80021ba <HAL_DMA_Abort_IT>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80032c6:	e003      	b.n	80032d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f813 	bl	80032f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80032ce:	e000      	b.n	80032d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80032d0:	bf00      	nop
    return;
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
  }
}
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	08003309 	.word	0x08003309

080032e0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff ffe6 	bl	80032f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f103 020c 	add.w	r2, r3, #12
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10f      	bne.n	800338c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800337a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f9ec 	bl	8003764 <SPI_CloseRxTx_ISR>
    }
  }
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	7812      	ldrb	r2, [r2, #0]
 80033a8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10f      	bne.n	80033ec <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033da:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f9bc 	bl	8003764 <SPI_CloseRxTx_ISR>
    }
  }
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	b292      	uxth	r2, r2
 8003408:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	1c9a      	adds	r2, r3, #2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10f      	bne.n	800344c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f98c 	bl	8003764 <SPI_CloseRxTx_ISR>
    }
  }
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	881a      	ldrh	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	1c9a      	adds	r2, r3, #2
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003498:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f95d 	bl	8003764 <SPI_CloseRxTx_ISR>
    }
  }
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f103 020c 	add.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	7812      	ldrb	r2, [r2, #0]
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9ac 	bl	800384c <SPI_CloseRx_ISR>
  }
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	b292      	uxth	r2, r2
 8003510:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	1c9a      	adds	r2, r3, #2
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f989 	bl	800384c <SPI_CloseRx_ISR>
  }
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	4613      	mov	r3, r2
 8003550:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003552:	e04c      	b.n	80035ee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d048      	beq.n	80035ee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800355c:	f7fe f9b2 	bl	80018c4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d902      	bls.n	8003572 <SPI_WaitFlagStateUntilTimeout+0x30>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d13d      	bne.n	80035ee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003580:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800358a:	d111      	bne.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003594:	d004      	beq.n	80035a0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d107      	bne.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b8:	d10f      	bne.n	80035da <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e00f      	b.n	800360e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	429a      	cmp	r2, r3
 800360a:	d1a3      	bne.n	8003554 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af02      	add	r7, sp, #8
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800362a:	d111      	bne.n	8003650 <SPI_EndRxTransaction+0x3a>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003634:	d004      	beq.n	8003640 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363e:	d107      	bne.n	8003650 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003658:	d12a      	bne.n	80036b0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d012      	beq.n	800368a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2200      	movs	r2, #0
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff ff67 	bl	8003542 <SPI_WaitFlagStateUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d02d      	beq.n	80036d6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e026      	b.n	80036d8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2200      	movs	r2, #0
 8003692:	2101      	movs	r1, #1
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ff54 	bl	8003542 <SPI_WaitFlagStateUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01a      	beq.n	80036d6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e013      	b.n	80036d8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2101      	movs	r1, #1
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff ff41 	bl	8003542 <SPI_WaitFlagStateUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e000      	b.n	80036d8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <SPI_EndRxTxTransaction+0x7c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <SPI_EndRxTxTransaction+0x80>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0d5b      	lsrs	r3, r3, #21
 80036f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800370a:	d112      	bne.n	8003732 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	2180      	movs	r1, #128	; 0x80
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff ff13 	bl	8003542 <SPI_WaitFlagStateUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e00f      	b.n	8003752 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3b01      	subs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d0f2      	beq.n	8003732 <SPI_EndRxTxTransaction+0x52>
 800374c:	e000      	b.n	8003750 <SPI_EndRxTxTransaction+0x70>
        break;
 800374e:	bf00      	nop
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000010 	.word	0x20000010
 8003760:	165e9f81 	.word	0x165e9f81

08003764 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <SPI_CloseRxTx_ISR+0xe0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a35      	ldr	r2, [pc, #212]	; (8003848 <SPI_CloseRxTx_ISR+0xe4>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	0a5b      	lsrs	r3, r3, #9
 8003778:	2264      	movs	r2, #100	; 0x64
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003780:	f7fe f8a0 	bl	80018c4 <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0220 	bic.w	r2, r2, #32
 8003794:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037a8:	e009      	b.n	80037be <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0eb      	beq.n	8003796 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	2164      	movs	r1, #100	; 0x64
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ff8c 	bl	80036e0 <SPI_EndRxTxTransaction>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	f043 0220 	orr.w	r2, r3, #32
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d115      	bne.n	800382c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b04      	cmp	r3, #4
 800380a:	d107      	bne.n	800381c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7fd f825 	bl	8000864 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800381a:	e00e      	b.n	800383a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fd5b 	bl	80032e0 <HAL_SPI_TxRxCpltCallback>
}
 800382a:	e006      	b.n	800383a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff fd5d 	bl	80032f4 <HAL_SPI_ErrorCallback>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000010 	.word	0x20000010
 8003848:	057619f1 	.word	0x057619f1

0800384c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003862:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003864:	f7fe f82e 	bl	80018c4 <HAL_GetTick>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	2164      	movs	r1, #100	; 0x64
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fed1 	bl	8003616 <SPI_EndRxTransaction>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	f043 0220 	orr.w	r2, r3, #32
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fc ffd5 	bl	8000864 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80038ba:	e002      	b.n	80038c2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fd19 	bl	80032f4 <HAL_SPI_ErrorCallback>
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e01d      	b.n	8003918 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7fd fe57 	bl	80015a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3304      	adds	r3, #4
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f000 fb4f 	bl	8003fac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d007      	beq.n	800395a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e01d      	b.n	80039b6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f815 	bl	80039be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f000 fb00 	bl	8003fac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2201      	movs	r2, #1
 80039e4:	6839      	ldr	r1, [r7, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fdca 	bl	8004580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <HAL_TIM_PWM_Start+0x74>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_TIM_PWM_Start+0x2c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <HAL_TIM_PWM_Start+0x78>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_TIM_PWM_Start+0x30>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_TIM_PWM_Start+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d007      	beq.n	8003a3c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40010400 	.word	0x40010400

08003a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d122      	bne.n	8003aac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d11b      	bne.n	8003aac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0202 	mvn.w	r2, #2
 8003a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa6b 	bl	8003f6e <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa5d 	bl	8003f5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fa6e 	bl	8003f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d122      	bne.n	8003b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d11b      	bne.n	8003b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0204 	mvn.w	r2, #4
 8003ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa41 	bl	8003f6e <HAL_TIM_IC_CaptureCallback>
 8003aec:	e005      	b.n	8003afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa33 	bl	8003f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fa44 	bl	8003f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d122      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d11b      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0208 	mvn.w	r2, #8
 8003b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2204      	movs	r2, #4
 8003b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fa17 	bl	8003f6e <HAL_TIM_IC_CaptureCallback>
 8003b40:	e005      	b.n	8003b4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa09 	bl	8003f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fa1a 	bl	8003f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b10      	cmp	r3, #16
 8003b60:	d122      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0210 	mvn.w	r2, #16
 8003b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f9ed 	bl	8003f6e <HAL_TIM_IC_CaptureCallback>
 8003b94:	e005      	b.n	8003ba2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f9df 	bl	8003f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f9f0 	bl	8003f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d10e      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d107      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0201 	mvn.w	r2, #1
 8003bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fc fe2e 	bl	8000830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b80      	cmp	r3, #128	; 0x80
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bec:	2b80      	cmp	r3, #128	; 0x80
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fdbe 	bl	800477c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f9b5 	bl	8003f96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0220 	mvn.w	r2, #32
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fd88 	bl	8004768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e0b4      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b0c      	cmp	r3, #12
 8003c8e:	f200 809f 	bhi.w	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003c92:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ccd 	.word	0x08003ccd
 8003c9c:	08003dd1 	.word	0x08003dd1
 8003ca0:	08003dd1 	.word	0x08003dd1
 8003ca4:	08003dd1 	.word	0x08003dd1
 8003ca8:	08003d0d 	.word	0x08003d0d
 8003cac:	08003dd1 	.word	0x08003dd1
 8003cb0:	08003dd1 	.word	0x08003dd1
 8003cb4:	08003dd1 	.word	0x08003dd1
 8003cb8:	08003d4f 	.word	0x08003d4f
 8003cbc:	08003dd1 	.word	0x08003dd1
 8003cc0:	08003dd1 	.word	0x08003dd1
 8003cc4:	08003dd1 	.word	0x08003dd1
 8003cc8:	08003d8f 	.word	0x08003d8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fa0a 	bl	80040ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0208 	orr.w	r2, r2, #8
 8003ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0204 	bic.w	r2, r2, #4
 8003cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6999      	ldr	r1, [r3, #24]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	619a      	str	r2, [r3, #24]
      break;
 8003d0a:	e062      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fa5a 	bl	80041cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6999      	ldr	r1, [r3, #24]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	021a      	lsls	r2, r3, #8
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	619a      	str	r2, [r3, #24]
      break;
 8003d4c:	e041      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 faaf 	bl	80042b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0208 	orr.w	r2, r2, #8
 8003d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0204 	bic.w	r2, r2, #4
 8003d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69d9      	ldr	r1, [r3, #28]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	61da      	str	r2, [r3, #28]
      break;
 8003d8c:	e021      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fb03 	bl	80043a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69d9      	ldr	r1, [r3, #28]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	021a      	lsls	r2, r3, #8
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	61da      	str	r2, [r3, #28]
      break;
 8003dce:	e000      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003dd0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_ConfigClockSource+0x18>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e0a6      	b.n	8003f52 <HAL_TIM_ConfigClockSource+0x166>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d067      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x120>
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	d80b      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x6c>
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d073      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x140>
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d802      	bhi.n	8003e4e <HAL_TIM_ConfigClockSource+0x62>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d06f      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e4c:	e078      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d06c      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x140>
 8003e52:	2b30      	cmp	r3, #48	; 0x30
 8003e54:	d06a      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e56:	e073      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e58:	2b70      	cmp	r3, #112	; 0x70
 8003e5a:	d00d      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x8c>
 8003e5c:	2b70      	cmp	r3, #112	; 0x70
 8003e5e:	d804      	bhi.n	8003e6a <HAL_TIM_ConfigClockSource+0x7e>
 8003e60:	2b50      	cmp	r3, #80	; 0x50
 8003e62:	d033      	beq.n	8003ecc <HAL_TIM_ConfigClockSource+0xe0>
 8003e64:	2b60      	cmp	r3, #96	; 0x60
 8003e66:	d041      	beq.n	8003eec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003e68:	e06a      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d066      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x152>
 8003e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e74:	d017      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e76:	e063      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6899      	ldr	r1, [r3, #8]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f000 fb5a 	bl	8004540 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]
      break;
 8003ea4:	e04c      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6899      	ldr	r1, [r3, #8]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f000 fb43 	bl	8004540 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec8:	609a      	str	r2, [r3, #8]
      break;
 8003eca:	e039      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f000 fab7 	bl	800444c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2150      	movs	r1, #80	; 0x50
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fb10 	bl	800450a <TIM_ITRx_SetConfig>
      break;
 8003eea:	e029      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f000 fad6 	bl	80044aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2160      	movs	r1, #96	; 0x60
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fb00 	bl	800450a <TIM_ITRx_SetConfig>
      break;
 8003f0a:	e019      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f000 fa97 	bl	800444c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2140      	movs	r1, #64	; 0x40
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 faf0 	bl	800450a <TIM_ITRx_SetConfig>
      break;
 8003f2a:	e009      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f000 fae7 	bl	800450a <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e000      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a40      	ldr	r2, [pc, #256]	; (80040c0 <TIM_Base_SetConfig+0x114>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fca:	d00f      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3d      	ldr	r2, [pc, #244]	; (80040c4 <TIM_Base_SetConfig+0x118>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3c      	ldr	r2, [pc, #240]	; (80040c8 <TIM_Base_SetConfig+0x11c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3b      	ldr	r2, [pc, #236]	; (80040cc <TIM_Base_SetConfig+0x120>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3a      	ldr	r2, [pc, #232]	; (80040d0 <TIM_Base_SetConfig+0x124>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d108      	bne.n	8003ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2f      	ldr	r2, [pc, #188]	; (80040c0 <TIM_Base_SetConfig+0x114>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d02b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d027      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2c      	ldr	r2, [pc, #176]	; (80040c4 <TIM_Base_SetConfig+0x118>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d023      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2b      	ldr	r2, [pc, #172]	; (80040c8 <TIM_Base_SetConfig+0x11c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01f      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2a      	ldr	r2, [pc, #168]	; (80040cc <TIM_Base_SetConfig+0x120>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <TIM_Base_SetConfig+0x124>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d017      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a28      	ldr	r2, [pc, #160]	; (80040d4 <TIM_Base_SetConfig+0x128>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <TIM_Base_SetConfig+0x12c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00f      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a26      	ldr	r2, [pc, #152]	; (80040dc <TIM_Base_SetConfig+0x130>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a25      	ldr	r2, [pc, #148]	; (80040e0 <TIM_Base_SetConfig+0x134>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <TIM_Base_SetConfig+0x138>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a23      	ldr	r2, [pc, #140]	; (80040e8 <TIM_Base_SetConfig+0x13c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d108      	bne.n	8004070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <TIM_Base_SetConfig+0x114>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_Base_SetConfig+0xf8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a0c      	ldr	r2, [pc, #48]	; (80040d0 <TIM_Base_SetConfig+0x124>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d103      	bne.n	80040ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	615a      	str	r2, [r3, #20]
}
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40000c00 	.word	0x40000c00
 80040d0:	40010400 	.word	0x40010400
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800
 80040e0:	40001800 	.word	0x40001800
 80040e4:	40001c00 	.word	0x40001c00
 80040e8:	40002000 	.word	0x40002000

080040ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 0302 	bic.w	r3, r3, #2
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <TIM_OC1_SetConfig+0xd8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC1_SetConfig+0x64>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a1f      	ldr	r2, [pc, #124]	; (80041c8 <TIM_OC1_SetConfig+0xdc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10c      	bne.n	800416a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0308 	bic.w	r3, r3, #8
 8004156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f023 0304 	bic.w	r3, r3, #4
 8004168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <TIM_OC1_SetConfig+0xd8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_OC1_SetConfig+0x8e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <TIM_OC1_SetConfig+0xdc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d111      	bne.n	800419e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	621a      	str	r2, [r3, #32]
}
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40010400 	.word	0x40010400

080041cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0210 	bic.w	r2, r3, #16
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0320 	bic.w	r3, r3, #32
 8004216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <TIM_OC2_SetConfig+0xe4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_OC2_SetConfig+0x68>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <TIM_OC2_SetConfig+0xe8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d10d      	bne.n	8004250 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800423a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a17      	ldr	r2, [pc, #92]	; (80042b0 <TIM_OC2_SetConfig+0xe4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_OC2_SetConfig+0x94>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <TIM_OC2_SetConfig+0xe8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d113      	bne.n	8004288 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800426e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40010400 	.word	0x40010400

080042b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a21      	ldr	r2, [pc, #132]	; (8004398 <TIM_OC3_SetConfig+0xe0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d003      	beq.n	800431e <TIM_OC3_SetConfig+0x66>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a20      	ldr	r2, [pc, #128]	; (800439c <TIM_OC3_SetConfig+0xe4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10d      	bne.n	800433a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a16      	ldr	r2, [pc, #88]	; (8004398 <TIM_OC3_SetConfig+0xe0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_OC3_SetConfig+0x92>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a15      	ldr	r2, [pc, #84]	; (800439c <TIM_OC3_SetConfig+0xe4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d113      	bne.n	8004372 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40010000 	.word	0x40010000
 800439c:	40010400 	.word	0x40010400

080043a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	031b      	lsls	r3, r3, #12
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <TIM_OC4_SetConfig+0xa4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_OC4_SetConfig+0x68>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a11      	ldr	r2, [pc, #68]	; (8004448 <TIM_OC4_SetConfig+0xa8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d109      	bne.n	800441c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800440e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	019b      	lsls	r3, r3, #6
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40010000 	.word	0x40010000
 8004448:	40010400 	.word	0x40010400

0800444c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f023 0201 	bic.w	r2, r3, #1
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f023 030a 	bic.w	r3, r3, #10
 8004488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b087      	sub	sp, #28
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f023 0210 	bic.w	r2, r3, #16
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	031b      	lsls	r3, r3, #12
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800450a:	b480      	push	{r7}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	f043 0307 	orr.w	r3, r3, #7
 800452c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	609a      	str	r2, [r3, #8]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800455a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	021a      	lsls	r2, r3, #8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	431a      	orrs	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4313      	orrs	r3, r2
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	609a      	str	r2, [r3, #8]
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2201      	movs	r2, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	401a      	ands	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1a      	ldr	r2, [r3, #32]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e05a      	b.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a21      	ldr	r2, [pc, #132]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d022      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004630:	d01d      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d018      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1a      	ldr	r2, [pc, #104]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00e      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d009      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a17      	ldr	r2, [pc, #92]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10c      	bne.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	4313      	orrs	r3, r2
 800467e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40000c00 	.word	0x40000c00
 80046b8:	40010400 	.word	0x40010400
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40001800 	.word	0x40001800

080046c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046dc:	2302      	movs	r3, #2
 80046de:	e03d      	b.n	800475c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <__libc_init_array>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4e0d      	ldr	r6, [pc, #52]	; (80047c8 <__libc_init_array+0x38>)
 8004794:	4c0d      	ldr	r4, [pc, #52]	; (80047cc <__libc_init_array+0x3c>)
 8004796:	1ba4      	subs	r4, r4, r6
 8004798:	10a4      	asrs	r4, r4, #2
 800479a:	2500      	movs	r5, #0
 800479c:	42a5      	cmp	r5, r4
 800479e:	d109      	bne.n	80047b4 <__libc_init_array+0x24>
 80047a0:	4e0b      	ldr	r6, [pc, #44]	; (80047d0 <__libc_init_array+0x40>)
 80047a2:	4c0c      	ldr	r4, [pc, #48]	; (80047d4 <__libc_init_array+0x44>)
 80047a4:	f000 f820 	bl	80047e8 <_init>
 80047a8:	1ba4      	subs	r4, r4, r6
 80047aa:	10a4      	asrs	r4, r4, #2
 80047ac:	2500      	movs	r5, #0
 80047ae:	42a5      	cmp	r5, r4
 80047b0:	d105      	bne.n	80047be <__libc_init_array+0x2e>
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047b8:	4798      	blx	r3
 80047ba:	3501      	adds	r5, #1
 80047bc:	e7ee      	b.n	800479c <__libc_init_array+0xc>
 80047be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047c2:	4798      	blx	r3
 80047c4:	3501      	adds	r5, #1
 80047c6:	e7f2      	b.n	80047ae <__libc_init_array+0x1e>
 80047c8:	08004818 	.word	0x08004818
 80047cc:	08004818 	.word	0x08004818
 80047d0:	08004818 	.word	0x08004818
 80047d4:	0800481c 	.word	0x0800481c

080047d8 <memset>:
 80047d8:	4402      	add	r2, r0
 80047da:	4603      	mov	r3, r0
 80047dc:	4293      	cmp	r3, r2
 80047de:	d100      	bne.n	80047e2 <memset+0xa>
 80047e0:	4770      	bx	lr
 80047e2:	f803 1b01 	strb.w	r1, [r3], #1
 80047e6:	e7f9      	b.n	80047dc <memset+0x4>

080047e8 <_init>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	bf00      	nop
 80047ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ee:	bc08      	pop	{r3}
 80047f0:	469e      	mov	lr, r3
 80047f2:	4770      	bx	lr

080047f4 <_fini>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr
